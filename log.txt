ls /user/ay27/WordCount/output
 [0]. /user/ay27/WordCount/output/_SUCCESS
 [1]. /user/ay27/WordCount/output/part-r-00000
choose file number to open: [0-1]
!=	2
#	21
########################################################################	3
%	20
%s\r\n'	14
'%s/%d'	1
'+',	1
'.']	1
'__main__':	1
'b',	1
'c',	1
'd',	1
'data/test.txt',	2
'data/test.txt']	1
'data/test_1713550.txt',	4
'data/test_1713550.txt']	1
'data/train.txt',	2
'data/train.txt']	1
'data/train_1713550.txt',	4
'data/train_1713550.txt']	1
'g',	1
'k']	1
'o',	1
'result/%s'	1
'v',	1
'w')	1
'y',	1
(2	2
(2limC+rhoC)*I).I	1
(BoA.T*BoA	1
(C0	1
(CoA.T	1
(CoB.T	1
(P=12)']	1
(P=6)',	1
(X2	1
(X3	1
(dot(BoA.T,	4
(dot(CoA.T,	1
(dot(CoB.T,	1
(g.lambdaB	1
(g.lambdaC	4
(limB+rhoB)*I).I	1
(limC	2
(self.B	1
(self.C	1
(self.C[kk	1
(test_dir,	1
*	30
+	33
+=	2
-	15
/	2
0	3
0))	2
0.0002,	4
0.0002]	1
0.005,	16
0.005]	4
0.5,	8
0.5]	2
0:	4
1	3
1))	1
1,	5
12]	1
1:	1
1]	4
1])	3
1][col]:	1
2,	2
20,	4
20000	1
20]	1
3])	3
6,	1
<=	3
=	112
==	3
A')	1
B')	1
Bj*	1
BoA	2
BoA)	8
C	1
C')	1
C0	2
C[0]	1
Ck	1
Ck*	1
CoA	3
CoA)	2
CoB	3
CoB)	1
CoB),	1
False	1
False,	4
False]	1
M	1
MF	1
None	12
PROCESS_COUNT	1
PROCESS_COUNT[ii]	1
R	3
R.append(tmpA[row[indexA]	1
RMSE')	2
RMSE_mat	1
RMSE_mat.append(g.RMSE)	1
RMSE_test_mat	1
RMSE_test_mat.append(g.RMSE_TEST)	1
RMSE_test_mat[ii],	1
R[ii]	1
STEP	1
STEP[ii]	1
True	1
True,	4
True]	1
USE_CK	1
USE_CK[ii]	1
USE_MF	1
USE_MF[ii]	1
WorkProc(multiprocessing.Process):	1
X1	2
X2	1
X3	1
['^',	1
['data/test.txt',	1
['data/test_1713550.txt',	1
['data/train.txt',	1
['data/train_1713550.txt',	1
['r',	1
[0.0002,	1
[0.005,	4
[0.5,	2
[1,	2
[20,	1
[False,	2
[]	10
[mat[0]]	1
[mat[ii]]	1
[r'CP',	1
\	13
__init__(self,	1
__name__	1
a,b,c	1
arg	1
arg_sort(data,	1
as	2
c=C[ii],	1
calc(omega,	1
class	1
col=0)	1
col=0),	1
col=0):	2
col=1)	1
col=1),	1
col=2)	1
col=2),	1
col])	1
collect_data()	1
collect_data():	1
continue	4
count	1
cur	2
cur.append(mat[ii])	1
current_set	3
data	3
data[arg]	1
def	10
dot	1
dot(dot(X1,	1
dot(dot(X2,	1
dot(dot(X3,	4
dpi=1000)	1
elif	1
else:	3
eta	1
eta[ii]	1
file.write('R	1
file.write('eta	1
file.write('lambda0	1
file.write('lambdaA	1
file.write('lambdaB	1
file.write('lambdaC	1
file.write('process	1
file.write('rhoB	1
file.write('rhoC	1
file.write('step	1
file.write('test_file	1
file.write('train_file	1
file.write('use	2
file:	1
for	7
format='eps',	1
from	1
g	2
g.B_	1
g.B_)	1
g.B_[jj]	1
g.C_	1
g.C_)	1
g.C_[kk]	3
g.C_[kk],	1
g.I	1
g.J	1
g.K	2
g.PROCESS_ACTIVE_MSG:	1
g.PROCESS_COUNT	1
g.R	1
g.R))	2
g.RMSE	1
g.RMSE_TEST	1
g.STEP	1
g.TIME	1
g.USE_CK	1
g.USE_CK:	1
g.USE_MF	1
g.data_set	1
g.data_set_index	1
g.datas	1
g.eta	1
g.lambda0	1
g.lambda0)	1
g.lambdaA	2
g.lambdaB	1
g.lambdaC	7
g.logger	1
g.logger_dir	2
g.matA	1
g.matA[index]	1
g.matB	1
g.matB[index]	1
g.matC	1
g.matC[index]	1
g.muC	1
g.muC)	1
g.rhoB	3
g.rhoB)	1
g.rhoC	6
g.rhoC)	4
g.test_data	1
g.test_file	2
g.timeline	1
g.train_file	2
if	9
ii	4
ii)	1
import	12
in	7
index	1
index)	1
index):	1
indexA,	1
indexB):	1
init'	1
init_g()	1
init_g():	1
int(current_set[0][0])	1
int(current_set[0][1])	1
int(current_set[0][2])	1
jj	1
kk	3
label=labels[ii])	1
labels	1
lambda0	1
lambda0[ii]	1
lambdaA	1
lambdaA[ii]	1
lambdaB	1
lambdaB[ii]	1
lambdaC	1
lambdaC[ii]	1
len(current_set)	3
len(mat)):	1
lim0)	1
limA*I).I	1
limC(Ck-1+Ck+1)	1
limC*muC)	1
linewidth=2.0,	1
main	1
main.main()	1
marker=M[ii],	1
markersize=12,	1
mat[ii	1
mat[ii][col]	1
matplotlib.pyplot	1
matrix	1
msg_pipe	1
msg_pipe,	1
multiprocessing	1
multiprocessing.Process.__init__(self)	1
multiprocessing.Process.terminate(self)	1
not	2
numpy	3
numpy.argsort(data[:,	1
numpy.array(current_set[:,	3
numpy.array(data)	1
numpy.eye(g.R)	1
numpy.matrix(calc(current_set,	3
numpy.zeros((g.J,	1
numpy.zeros((g.K,	1
omega:	1
open('%s/test_config.txt'	1
operator	1
os	1
os.mkdir(test_dir)	1
os.path.isdir(test_dir):	1
plt	1
plt.legend()	1
plt.plot(timeline_mat[ii],	1
plt.savefig('%s/result.eps'	1
plt.savefig('%s/result.png'	1
plt.xlabel('Elapsed	2
plt.ylabel('Test	2
print('%d	1
print('update	3
proc	1
r'P$^2$T$^2$F	2
r'PTTF',	1
rand	1
range(1,	1
range(len(PROCESS_COUNT)):	1
range(len(RMSE_test_mat)):	1
return	3
rhoB	1
rhoB*B_j-thetaB)	1
rhoB[ii]	1
rhoC	1
rhoC*C_k-thetaC)	1
rhoC[ii]	1
row	1
run(self):	1
self.A	1
self.A,	2
self.A[ii]	1
self.B	1
self.B,	2
self.B[jj]	1
self.C	1
self.C,	2
self.C[0]	1
self.C[kk	3
self.C[kk]	4
self.II	1
self.II).I)	6
self.index	1
self.keep_alive	2
self.keep_alive:	1
self.msg_pipe	1
self.msg_pipe.recv()	1
self.msg_pipe.send(g.PROCESS_FINISH)	1
self.splitedA	1
self.splitedA:	1
self.splitedB	1
self.splitedB:	1
self.splitedC	1
self.splitedC:	1
self.thetaB	2
self.thetaB[jj],	1
self.thetaC	2
self.thetaC[kk],	3
self.update_a_b_c()	1
self.update_parameter()	1
split(arg_sort(g.data_set[index],	3
split(mat,	1
str(PROCESS_COUNT))	1
str(R))	1
str(STEP))	1
str(USE_CK))	1
str(USE_MF))	1
str(eta))	1
str(lambda0))	1
str(lambdaA))	1
str(lambdaB))	1
str(lambdaC))	1
str(rhoB))	1
str(rhoC))	1
str(test_file))	1
str(train_file))	1
terminate(self):	1
test_dir	1
test_dir)	1
test_dir,	2
test_file	2
test_file[ii]	1
thetaB,	1
thetaC	1
time	2
time(s)')	2
time.localtime(time.time()))	1
time.strftime('%m_%d_%H_%M_%S',	1
timeline_mat	1
timeline_mat.append(g.timeline)	1
tmp	2
tmp.append(numpy.array(cur))	2
tmpA,	1
tmpB,	1
tmpB[row[indexB]	1
train_file	2
train_file[ii]	1
update	2
update_a_b_c(self):	1
update_parameter(self):	1
while	1
with	1
更新A矩阵	1
更新B矩阵	1
更新C矩阵	1
矩阵的秩	1

